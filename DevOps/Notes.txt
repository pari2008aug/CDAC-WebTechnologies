DevOps: Docker. Jenkins, Kubernetes, Microservices and place it in Docker. 
DevOps: Development + Operations. It is a collaboration b/w the Dev Team and the IT Team to make the software development and Production with Deployment in an automatted and repeated manner. It helps in making the Company's speeed to deliver the software and its services to the customers. 
Support the development and Operations. 

What is Development?
Development means the following things:
Requirement Gathering, Design, Unit testing, Coding and building the Application and ensure all the unit tests are passed. This is the development process. The Manager, the Team lead and the developer team are the part of the development process. 

What is operations?
Automation Testing, App Evaluation, INtegrations and deployment are the part of Operations. The App evaluation happens with an UAT(User Acceptance tests) member who acknowledges the process and the Application Execution. He/She will ensure that the App meets the requirements in an expected manner.  Auto Testers, IT support, Product evaluators and Customer users will be the part of the Operations Team.

Challenges: 
Many a case, the Ops teams are not aware of the technical Expertise of the Development and its Environment to build and execute the Application. 

How The Apps are deployed in real time Environment?
Design analysis will be done in the consulation with the customer, UAT member and the Product owner. A product owner is one who is aware of the in and out of the project. This includes the undestanding of the domain, issues with the Current Environment and also suggests the possible solutions for the issues related to the Project Documentation.
On analysing the requirement, a Software Design Doc(SDD) is prepared by one of the team members with collaboration with the Team and present the data to the Customer. This doc needs to be approvved by the Customer before we have the hands on coding of the Application.
With Agile Dev Methodology, U can plan UR Sprints. Sprint is a duration of implementing a certain task.  Sprint planning includes what task has to be given priority, who are the developers and what are the Use cases that one implements and a Tester to test UR code. Each Sprint will span for 2 to 3 weeks. The tasks will be allocated to the developers in the Sprint plan and the execution of the sprint will happen after that.
Sprint Execution will start on a presise date and Dev Teams start to coordinate with the Operations teams and try to set the envirionment suited to deploy the Application. Tools like Git, Jenkins, Dockers come into picture to make this process more Automated in nature. The Dev Team will develop the code to satisfy their unit tests. 

For Eg:
The Task: Get the Employees from the database
Requirement: Mock a Database. 
Implementation:
U should call the object's function on this database. 
U should assert the results. 
Ensure that the expected no of employees are matching the Employees of the Mock Database. 

During the Sprint Cycle, the Dev Team will develop the code, Unit test it, do a personal review(PR) and will also a Team Review before the code is pushed into the code repositary. This code repos could b pushed into a Code REPO like Git/ BitBucket/TFS etc.
The ops Team will use Tools like Jenkins to keep a watch on the pushes made to the Code Repo, for every push made, the tool will pull the code, build it, Auto Test it and give the report back to stack holders on the code push that had happened recently. Once the build succeeds, the Code is pushed into the server and the Customer Team will Functional test the code and give the approvals. If the code build has failed, the tool will generate Emails to all the stack holders of the project. This cycle will continue for every sprint. Any backlogs will be pushed to the next cycle.
Once all the sprints are completed, the Functionalities will be finally tested by the UAT Team and give an acknowledgement on the Functionatlies and the project gets closed after a Closure repont is sent from the customer and a FINAL HAND-SHAKE happens.

Steps taken before the Code is pushed into the Repository:
Class Design. 
Unit test cases are developed and approved
Coding begins with code being developed to satisfy the test cases. This is called as TEST DRIVEN DEV(TDD). 
A PCR(personal Code Review) or ICR(Interal Code Review) will be conducted and checked for all the coding stds. 
TL will do the Final Review of the code. 
Code is pushed to Repo. Demo is shown to all Stack holders in the meetings to close the sprint. 

Why DevOps?
Before DevOps, the Dev and Operations teams worked in complete Isolation.
Testing and Deployment were isolated activities done after the Development. With this, it comsumed more time than the regular build cycles. Unexpected Challenges used to come into picture. Manual Code Deployment lead to lot of human errors in the production environment. 
With DevOps, Software delivery is fast and easy. It also increases the deployment easiness. Many Organizations have moved to DevOps and with it, the Software deployment spped has increased by over 20%  of the total Application Delivery. 

Benifits of DevOps?
Predictability: The Dev Team and the Ops team will work in collaboration, any software that is created will go thru the cycle of events under the supervision of the DevOps Team. Build, Testing, Integration will be the part of the cycle. Any failures at any level will be known in the short time to all the stack holders and teams will put their effort in resolving those issues as early as possible. With this, the teams are aware of the issues and quickly resolve them and the deployment will be smoother. It gives low Failure rates compared to any other Deployment methodologies. 

Reproducability: With DevOps, we can version everything before it is deployed to the Production machine. the versioning is available on all the major tools of DevOps. Git as well as Jenkins. If any issue happens, we can revert back to the most stable version and make it work withput any show-stoppers. 

Maintainability: Any code developed using DevOps Methodologies are easy to maintain with lots of tools available in the industry. Many of these tools are Open Source and Free Licenced. To store the Code we use Git Repos, to build the Application cycle we use Jenkins, to place the built Code in the Production like Environment, we use Dockers and multiple Dockers are maintained using containerization like Kubernetes(K8s). From the Development to the Deployment to the Production, we have everything that could be automated and handled without much human interventions which leads to better and faster deployment. 

When do U go for DevOps?
Devops should be used for large Distributed Computing Apps like E-Commerce sites and Apps hosted in Cloud based Environments. It is also suited for Agile Development methodologies where the Larger App Development will be cut into small but rich in feature tasks and subtasks and builds are expected to be very frequent. In such cases, the changes are expected to be more and frequent(In one or 2 weeks) and build process is good to be automated so that the build handling will be internally done rather than one resource managing it. 

--------------------------------Day 2----------------------------------------------
DevOps automation tools: 
After the dev is completed, most of the operations related  to build, test, integration, deployment and maintaining is done using tools that are available in the IT World. For these things we may not need the work from the developer team. These works can be handled by Non-Developers with a fair knowledge of Development if not complete expertise. Most of the tasks are very routine in nature, so we dont need a real time resource to do the same task again and again. These routine procedures could be very well automated and allow the system to do it automatically without any human Interaction. 
Deployment Automation Tools: Jenkins is used for continuous Integration and Testing. 
Logging Mangement: Log4J or Splunk  that solves issues like storing, analystics and logging of the App details to a common stand point. 
Environment to deploy UR App: Docker is like UR Virtual Machine that contains the infrastructure required for UR App to run that includes OS, SDKs, Libraries, frameworks and Runtime required for UR App to run. It is  a container of all the above mentioned software on a simulated hardware where UR App will run. Each Docker container contains the minn requirements for UR App to run unlike the Virtual Machine which has the complete OS running on UR Existing OS. 
Containerization Tool: With large no of Docker Containers available, we can group the Docker Containers into a Cluster called Node in Kubernetes and allow the K8s to handle the monitoring of the Application. 

Docker: Is a centralized platform for packaging, deploying and running of the Applications as a closed Unit. It is a software platform that makes UR Process of building, running, managing and distributing Applications in a simple manner. It can virtualize the OS of a Computer on which UR App is installed and executed. 
Why Docker?
In recent times, most of the App Development is happening using Agile/SCRUM Development methodologies. In these cases, the Complete E2E App is not developed at a time. Every part of the app is developed independently, tested and deployed independently as a modular and micro level App.  U cannot have multiple servers and same server to hold all the services of UR App. It will become monolithic and for a while if UR server is down, the whole App and its services will be down that will be very costly for UR Organization. 
With Dockers, we can provide seperate virtual Environment for each of our services and will be work independently without a centralized server. Docker itself provides one server using Cloud to expose UR services to the rest of the world.
It reduces the requirement of heavy infrastructure resources for development and Production Environment.  The App will be placed inside a container that has all the hardware and the software resources required for the successfull execution of the App. It makes the deployment process more cost effective.

What are Containers?
Containers are self contained blocks within the Docker Environment that holds an Executable App in it. 

How does Docker work?
  Dockers use containers on the HOST's OS to run the Apps. It will create a Linux Kernel on the existing platform and make the Apps run on the virtualized Environment. Docker is an alternative to VMs. Dockers allow the Developers to pack the App, ship it into a single package where teh required infrastructure will be taken from the resources available either from the host OS or the Cloud Enviroinment and it will generate the required storage and the space for the App to Run.  

How Dockers are different from VMs?
Unlike VMs, containers use the same kernal of the host Environment but the VMs use independent OS kernels. With VMs, U can a complete OS with U and U can create, build and Execute Apps on that OS. 
But in Docker, all U have is the required infrastructure to make UR App execute with no more additional resources available. Eventually, this Container runs only UR App and nothing else. 

Dockers on Windows need Linux kernel installed in UR machine 

Command to install MOngoDB in UR Docker:
docker run -it mongo /bin/bash
Connect to MongoDb: mongod
Run the Mongo: mongo
U can also open Docker Desktop and run from the images by clicking the cmd window
--------------------------JENKINS-----------------------------------------------------
Continuous Integration(CI): It refers to the build and unit testing stages of a software release process. Every revision that is commited to the repo wil trigger an automted build and test. It will be a part of the DevOps pipeline where every code change that is pushed into GIT/CODE Base are automatically built, tested and prepared for a replease to production. 
JENKINS is one of the most popular CI Tool.

JENKINS is an Open source automation server tha helps in automating the parts of the Software development related to building, testing and Deploying the app faclilitating a continuous integration and delivery. It is a service based system that runs servlet containers such as Apache Tomcat. 
Why use Jenkins?
Jenkins is used to build and test UR product continuously, so that developers can integrate the changes into the build as a process. It is a part of the DevOps process along with nother native Cloud computing tools. 

Developers develop their code and push it to Git/BitBucket/Hub.
Testers will work on JUnit(Java Unit Testing framework), Selenium(Automation Testing framework) and Cucumber(JS Framework for Testing). 
Jenkins is a tool that links all the stack holders of the development, testing and integration teams. It will be used by the DevOps team to integrate the code from a Specific Git Repo and map the building process and the testing environment. Jenkins internally has tools to monitor for any changes made into the repo, builds the application, notifies the testing environment to start testing the application. If all the tests are completed, it is automated to push the build to the Production Environment like docker, Azure, AWS and make the App available for all the stack holders of the product. 
Ops Team will from now on work on the docker or the production environment to do any fine tuning to be done on the application for stability of the App. 

Jenkins can be installed on any machine with the JDK8 + installed in it already, U should have also set th Env Variables like PATH, JAVA_HOME, JRE_HOME to the JDK Location. 
After this U can install JENKINS from the website. 

Steps required to install JENKINS:
Install JDK 8 or JDK 11 in UR Machine if it is not installed. Set the Environment variables of JAVA_HOME, PATH and JRE_HOME variables in UR machine.
Download the Jenkins Software installation setup file from the Jenkins Website. 
During the installation, ensure U set the location of the JDK to UR local path. 
Set the Port no for the Jenkins(Default is 8080) and ensure that the Port no is valid. 
Complete the setup and restart the machine. 
Open the browser, type localhost:PortNo in the URI. 
Jenkins will ask for a Preset Admin password which is available at "C:\ProgramData\Jenkins\.jenkins\secrets\initialAdminPassword". After setting it, Jenkins will ask for plugins to be installed. U can choose the install selected Plugins and allow URSElf to install the requried ones. Make sure U have git and rest can be optional. 
After the Installation of the plugins, the browser will open the dashboard of the Jenkins where Users can add new jobs. 
---------------------------------------------------------------------------------------
Kubernetes: 
Kubernetes is a container management System developed by CNCF(Cloud Native Computing Foundation) that developed Google Platform. It helps in managing the containerized apps in various environments like Cloud physical and virtual. It is said to be highly flexible container tool to deliver complex apps running in clusters of 100s of individual servers. It is purely a cloud based Environment.. It comes with capability of high flexibility, automatic deployment, scaling of apps and operations of app containers across multiple clusters. It is mainly designed for container centric Infrastructure.

Understanding the scenario: 
U develop UR code in the form of a Microservice. A small self contained unit ofa program(MVC Controller built in Spring boot) is called as MICROSERVICE. U place this code inside a GIT REPO for Continuous integration. U will build the App and test it using CI tool like JENKINS and on post build, U place it in a container like DOCKER with all the software and hardware infra required for the service to expose. 
In a real time scenario, there will be many such microservices created(Customer, Employee, Billing, Inventory, Vendors, Products, Locations and many more). Each of these services are placed in one or more containers. 
Kubernetes is a container management tool that will have a database of containers maintained in a cloud based environment that ensures safety and reliability with static content available all the time. It maintains secondary clustors that will be made available if the primary clusters are broken down due to some emergency. It ensures the service is available all the time and maintained. 

How Kubernetes(K8s) works? 
It is linux based kernel that share lot of resources required to manage Complex apps. It is primarily used for distrubuted computing where it abstracts the underlying hardware servers and offer std and consistent interface for UR App management to consume a shared pool of resources(Both hardware and software). Its UI will have a dashboard of servers and containers that a Devops Engineer could monitor it from one place. 

Features:
Automatic scheduling of App Processes. 
Integrated with CI tools for continuos dev, integration and deployment.
Automatic Rollouts and RollBacks.
System is loosly coupled where every component works as a seperate unit. 
High density of resource utilization. 
App Centric Management thru nice Dashboards. 
Envronment consistency: Apps must run on all conditions, if there are any failures in any of the servers, the Environment should provide a backup server to run the show without stopping it. The customer will not be aware whether the service is rendered from the Primary or Secondary servers. 

Architecure:
Follows a Cluster archictecture for its management. It maintains a server of servers scaled across the world to manage the Apps. Any container placed in the K8s server will have a backup server called as secondayr server that is available whenever the primary server is down. If any time, UR App crashes in the primary server, the secondary server will load the app once again to make the services available to the customer all the time. 

Key terms:
POD: Is the smallest unit of a K8s App. It can be a single app that is running in one or more group of containers. Each POD contains one or more containers that make UR App.
NODE: Node is a singe host that is capable of running on a single Physical VM. Each node will contain one or more PODs. We also called NODES as Minions. Clients will consume the App from the PODS available in NODES.
SERVER: The Server or the service is a K8s logical set of PODS that work together for a certain functionality within an App. Services are rendered using subcriptions made by the user.
CLUSTER: All the apps will be placed inside a collection of servers called as CLUSTER. Cluster is basically a collection of servers that help in managing and sharing the resources like RAM, CPU, DISK and devices intoa usable POOL.
MASTER: Collection of Components that make up the Control panel of the K8s. This master will be maintained by a K8s Admin who work on cluster desisions like scheduling, responding to cluster events and management of the resources. 
NAMESPACE: it is a logical envinronment that will be used to divide the clusters on a logical grouping. 

Components of Master node:
Master is the actual server of the K8s. It internally runs multiple processes that are nessasary to run and manage the clusters. 
API-SERVER is one such process which will provide the services from various nodes and pods to the end customer. It is the GATEWAY for the Clusters. Developers interact with the API Server to get the requried services for their apps. 
CONTROLLER Manager keeps an overview of what is happening in the clusters and ensure all the work is done properly like COntainer maintainence, rescheduling work etc  
SCHEDULER will be responsible for scheduling the various clusters with different nodes based on the work load and the currently available resources.. 
There is one more process called as ETCD which is the main server for the K8s. This will have a large no of databases each containing the data of where each node and its PODS are available. It stores the info as KEY-VALUE pairs and Config data at any given point of time. It will also maintain the status data of each node....

Advantages:
With its DASHBOARD UI, Engineers can maintain the K8s Environment easily.
Developed by GOOGLE, there is a lot of industry experience in it. 
One of the largest community among the container orchestration tools. 
It has support from various Cloud computing players like Azure, Google, AWS and openstack. 
It has good community support in the form of StackOverflow and K8s Dev Community.
It is easy to find resources and tools required to containerization management. 

Disadvantages:
U need a heavy infrastrcture for creating K8s Environment. It is complicated and in some scenarios, UR App might never need this kind of a heavy infrastructure. 
Security is not that effective when it comes to distributed computing like Container Orchrestration. 

Refer a Youtube video by Techworld with Nana for Understanding K8s.  













